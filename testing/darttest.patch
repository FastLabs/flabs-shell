Index: unittest/unittest_dartest.dart
===================================================================
--- unittest/unittest_dartest.dart	(revision 4589)
+++ unittest/unittest_dartest.dart	(working copy)
@@ -7,9 +7,8 @@
  * runner along side the application under test in a browser.
  */
 #library("unittest");
+#import('dart:html');
 
-#import("dart:dom");
-
 #source("shared.dart");
 
 /** Getter so that the DARTest UI can access tests. */
Index: dartest/dartest.dart
===================================================================
--- dartest/dartest.dart	(revision 4589)
+++ dartest/dartest.dart	(working copy)
@@ -4,7 +4,8 @@
 
 #library('dartest');
 
-#import('dart:dom');
+//#import('dart:dom');
+#import('dart:html');
 #import('../unittest/unittest_dartest.dart');
 
 #source('css.dart');
@@ -21,7 +22,7 @@
   Element get green();
   Element get coverageBody();
   Element get covPreElem();
-  HTMLElement get covTableBody();
+  Element get covTableBody();
 }
 
 class AppElements implements Elements {
@@ -36,14 +37,14 @@
   Element green;
   Element coverageBody;
   Element covPreElem;
-  HTMLElement covTableBody;
+  Element covTableBody;
 }
 
 
 /** DARTest provides a library to run tests in the app. */
 class DARTest{
   AppElements _inAppElements, _fullAppElements, _appElements;
-  DOMWindow _runnerWindow;
+  Window _runnerWindow;
 
   DARTest() { 
     _runnerWindow = window;
@@ -65,54 +66,52 @@
   /** Create the results table after loading tests. */
   void _createResultsTable() {
     _log('Creating results table');
-    HTMLTableElement table = _runnerWindow.document.createElement('table');
-    table.className = 'dt-results';
-    HTMLTableSectionElement head = _runnerWindow.document.createElement('thead');
+    TableElement table = new Element.tag('table');
+    table.classes.add('dt-results');
+    HeadElement head = new Element.tag('thead');
     head.innerHTML = '<tr><th>ID <th>Description <th>Result';
-    table.appendChild(head);
-    
-    HTMLTableSectionElement body = _runnerWindow.document.createElement('tbody');
+    table.elements.add(head);
+    TableSectionElement body = new Element.tag('tbody');
     body.id = 'dt-results-body';
     tests.forEach((final t) {
-      HTMLTableRowElement testDetailRow = 
-        _runnerWindow.document.createElement('tr');
+      TableRowElement testDetailRow = 
+        new Element.tag('tr');
       testDetailRow.id = 'dt-test-${t.id}';
       _addTestDetails(t, testDetailRow);
-      body.appendChild(testDetailRow);
+      body.elements.add(testDetailRow);
       
-      HTMLTableRowElement testMessageRow = 
-        _runnerWindow.document.createElement('tr');
+      TableRowElement testMessageRow = 
+        new Element.tag('tr');
       testMessageRow.id = 'dt-detail-${t.id}';
-      testMessageRow.className = 'dt-hide';
-      body.appendChild(testMessageRow);
+      testMessageRow.classes.add('dt-hide');
+      body.elements.add(testMessageRow);
     });
     
-    table.appendChild(body);
+    table.elements.add(body);
     
     if(_appElements.testBody != null) {
-      _appElements.testBody.appendChild(table);
+      _appElements.testBody.elements.add(table);
     }
   }
 
   /** Update the results table for test. */
-  void _updateResultsTable(TestCase t, DOMWindow domWin) {
-    HTMLTableRowElement row = domWin.document.getElementById('dt-test-${t.id}');
-    row.className = 'dt-result-row';
+  void _updateResultsTable(TestCase t, Window domWin) {
+    TableRowElement row = document.query('#dt-test-${t.id}');
+    row.classes.add('dt-result-row');
     row.innerHTML = ''; // Remove all children as we will re-populate them
     _addTestDetails(t, row);
     
-    HTMLTableRowElement details = 
-      domWin.document.getElementById('dt-detail-${t.id}');
-    details.appendChild(_getTestStats(t, domWin));
+    TableRowElement details = document.query('#dt-detail-${t.id}');
+    details.elements.add(_getTestStats(t, domWin));
     
-    row.addEventListener('click', (Event e) {
-        if(details.className == 'dt-hide') {
-          details.className = '';
-        } else {
-          details.className = 'dt-hide';
-        }
-      }, true);
-  }
+    row.on.click.add( (event ) {
+      if(details.classes.contains ('dt-hide')) {
+        details.classes.clear();
+      } else {
+        details.classes.add('dt-hide');
+      }
+    });
+  } 
   
   /** Escape HTML special chars. */
   String _escape(String str) {
@@ -126,41 +125,41 @@
   }
   
   /** Get test results as table cells. */
-  void _addTestDetails(TestCase t, HTMLTableRowElement row) {
-    HTMLTableCellElement testId = _runnerWindow.document.createElement('td');
-    testId.textContent = t.id;
-    row.appendChild(testId);
+  void _addTestDetails(TestCase t, TableRowElement row) {
+    TableCellElement testId = new Element.tag('td');
+    testId.text = '${t.id}';
+    row.elements.add(testId);
     
-    HTMLTableCellElement testDesc = _runnerWindow.document.createElement('td');
-    testDesc.textContent = t.description;
-    row.appendChild(testDesc);
+    TableCellElement testDesc = new Element.tag('td');
+    testDesc.text = t.description;
+    row.elements.add(testDesc);
     
-    HTMLTableCellElement testResult = _runnerWindow.document.createElement('td');
+    TableCellElement testResult = new Element.tag('td');
     String result = (t.result == null) ? 'none' : _escape(t.result);
-    testResult.className = 'dt-$result';
+    testResult.classes.add('dt-$result');
     testResult.title = '${_escape(t.message)}';
-    testResult.textContent = result.toUpperCase();
-    row.appendChild(testResult);
+    testResult.text = result.toUpperCase();
+    row.elements.add(testResult);
   }
   
-  HTMLTableCellElement _getTestStats(TestCase t, DOMWindow domWin) {
-    HTMLTableCellElement tableCell = domWin.document.createElement('td');
+  TableCellElement _getTestStats(TestCase t, Window domWin) {
+    TableCellElement tableCell = new Element.tag('td');
     tableCell.colSpan = 3;
     
     if(t.message != '') {
-      HTMLSpanElement messageSpan = domWin.document.createElement('span');
-      messageSpan.textContent = t.message;
-      tableCell.appendChild(messageSpan);
-      tableCell.appendChild(domWin.document.createElement('br'));
+      SpanElement messageSpan = new Element.tag('span');
+      messageSpan.text = t.message;
+      tableCell.elements.add(messageSpan);
+      tableCell.elements.add(new Element.tag('br'));
     }
     if(t.stackTrace != null) {
-      HTMLPreElement stackTacePre = domWin.document.createElement('pre');
-      stackTacePre.textContent = t.stackTrace;
+      PreElement stackTacePre = new Element.tag('pre');
+      stackTacePre.text = t.stackTrace;
     }
     
-    HTMLSpanElement durationSpan = domWin.document.createElement('span');
-    durationSpan.textContent = 'took ${_printDuration(t.runningTime)}';
-    tableCell.appendChild(durationSpan);
+    SpanElement durationSpan = new Element.tag('span');
+    durationSpan.text = 'took ${_printDuration(t.runningTime)}';
+    tableCell.elements.add(durationSpan);
     
     return tableCell;
   }
@@ -188,16 +187,16 @@
     // Update progressbar
     var pPass = 
       ((testsRun - testsFailed - testsErrors) / tests.length) * 100;
-    elements.green.setAttribute('style', 'width:$pPass%');
+    elements.green.style.width = '$pPass%';
     var pFailed = pPass + (testsFailed / tests.length) * 100;
-    elements.red.setAttribute('style', 'width:$pFailed%');
+    elements.red.style.width = '$pFailed%';
     var pErrors = pFailed + (testsErrors / tests.length) * 100;
-    elements.orange.setAttribute('style', 'width:$pErrors%');
+    elements.orange.style.width = '$pErrors%';
 
     // Update status
-    elements.testsRunElem.textContent = testsRun.toString();
-    elements.testsFailedElem.textContent = testsFailed.toString();
-    elements.testsErrorsElem.textContent = testsErrors.toString();
+    elements.testsRunElem.text = testsRun.toString();
+    elements.testsFailedElem.text = testsFailed.toString();
+    elements.testsErrorsElem.text = testsErrors.toString();
   }
   
   String _printDuration(Duration timeDuration) {
@@ -221,180 +220,185 @@
   }
 
   /** Populates the floating div with controls and toolbar. */
-  HTMLDivElement _renderMain() {
-    HTMLDivElement containerDiv = _runnerWindow.document.createElement('div');
-    containerDiv.className = 'dt-container';
+  DivElement _renderMain() {
+    DivElement containerDiv = new Element.tag('div');
+    containerDiv.classes.add('dt-container');
     _appElements.containerDiv = containerDiv;
     
     // Add the test controls
-    HTMLDivElement mainElem = _runnerWindow.document.createElement('div');
-    mainElem.className = 'dt-main';
+    DivElement mainElem = new Element.tag('div');
+    mainElem.classes.add('dt-main');
     _appElements.mainElem = mainElem;
     
     _showTestControls();
     
     // Create header to hold window controls
     if(_runnerWindow == window) {
-      HTMLDivElement headDiv = _runnerWindow.document.createElement('div');
-      headDiv.className = 'dt-header';
+      DivElement headDiv = new Element.tag('div');
+      headDiv.classes.add('dt-header');
       headDiv.innerHTML = 'DARTest: In-App View';
-      HTMLImageElement close = _runnerWindow.document.createElement('img');
-      close.className = 'dt-header-close';
-      close.addEventListener('click', (event) {
-        containerDiv.className = 'dt-hide';
-      }, true);
-      HTMLImageElement pop = _runnerWindow.document.createElement('img');
-      pop.className = 'dt-header-pop';
-      pop.addEventListener('click', (event) => _dartestMaximize(), true);
-      HTMLImageElement minMax = _runnerWindow.document.createElement('img');
-      minMax.className = 'dt-header-min';
-      minMax.addEventListener('click', (event) {
-        if (mainElem.classList.contains('dt-hide')) {
-          mainElem.classList.remove('dt-hide');
-          mainElem.classList.add('dt-show');
-          minMax.className = 'dt-header-min';
+      ImageElement close = new Element.tag('img');
+      close.classes.add('dt-header-close');
+      close.on.click.add((event) {
+        containerDiv.classes.add('dt-hide');
+      });
+     
+      ImageElement pop = new Element.tag('img');
+      pop.classes.add('dt-header-pop');
+      pop.on.click.add((event)=> _dartestMaximize());
+      
+      ImageElement minMax = new Element.tag('img');
+      minMax.classes.add( 'dt-header-min');
+      minMax.on.click.add((event) {
+        if (mainElem.classes.contains('dt-hide')) {
+          mainElem.classes.remove('dt-hide');
+          mainElem.classes.add('dt-show');
+          minMax.classes.add('dt-header-min');
         } else {
-          if (mainElem.classList.contains('dt-show')) {
-            mainElem.classList.remove('dt-show');
+          if (mainElem.classes.contains('dt-show')) {
+            mainElem.classes.remove('dt-show');
           }
-          mainElem.classList.add('dt-hide');
-          minMax.className = 'dt-header-max';
+          mainElem.classes.add('dt-hide');
+          minMax.classes.add('dt-header-max');
         }
-      }, true);
-      headDiv.appendChild(close);
-      headDiv.appendChild(pop);
-      headDiv.appendChild(minMax);
+      });
       
-      containerDiv.appendChild(headDiv);
+      
+      headDiv.elements.add(close);
+      headDiv.elements.add(pop);
+      headDiv.elements.add(minMax);
+      
+      containerDiv.elements.add(headDiv);
     }
 
-    HTMLDivElement tabDiv = _runnerWindow.document.createElement('div');
-    tabDiv.className = 'dt-tab';
-    HTMLUListElement tabList = _runnerWindow.document.createElement('ul');
-    HTMLLIElement testingTab = _runnerWindow.document.createElement('li');
-    HTMLLIElement coverageTab = _runnerWindow.document.createElement('li');
-    testingTab.className = 'dt-tab-selected';
-    testingTab.textContent = 'Testing';
-    testingTab.addEventListener('click', (event) {
+    DivElement tabDiv = new Element.tag('div');
+    tabDiv.classes.add('dt-tab');
+    UListElement tabList = new Element.tag('ul');
+    LIElement testingTab = new Element.tag('li');
+    LIElement coverageTab = new Element.tag('li');
+    testingTab.classes.add('dt-tab-selected');
+    testingTab.text = 'Testing';
+    testingTab.on.click.add((event){
       _showTestControls();
       _changeTabs(testingTab, coverageTab);
-    }, true);
-    tabList.appendChild(testingTab);
-    coverageTab.textContent = 'Coverage';
-    coverageTab.addEventListener('click', (event) {
+    });
+    
+    tabList.elements.add(testingTab);
+    coverageTab.text = 'Coverage';
+    coverageTab.on.click.add((event){
       _showCoverageControls();
       _changeTabs(coverageTab, testingTab);
-    }, true);
-    tabList.appendChild(coverageTab); 
-    tabDiv.appendChild(tabList);
-    containerDiv.appendChild(tabDiv);
+    });
     
+    tabList.elements.add(coverageTab); 
+    tabDiv.elements.add(tabList);
+    containerDiv.elements.add(tabDiv);
+    
     if(_runnerWindow != window) {
-      HTMLDivElement popIn = _runnerWindow.document.createElement('div');
-      popIn.className = 'dt-minimize';
+      DivElement popIn = new Element.tag('div');
+      popIn.classes.add('dt-minimize');
       popIn.innerHTML = 'Pop In &#8690;';
-      popIn.addEventListener('click', (event) => _dartestMinimize(), true);
-      containerDiv.appendChild(popIn);
+      popIn.on.click.add((event) => _dartestMinimize());
+      containerDiv.elements.add(popIn);
     }  
-    
-    containerDiv.appendChild(mainElem);
-    _runnerWindow.document.body.appendChild(containerDiv);
+    containerDiv.elements.add(mainElem);
+    _runnerWindow.document.body.elements.add(containerDiv);
   }
   
-  void _changeTabs(HTMLLIElement clickedTab, HTMLLIElement oldTab) {
-    oldTab.className = '';
-    clickedTab.className = 'dt-tab-selected';
+  void _changeTabs(LIElement clickedTab, LIElement oldTab) {
+    oldTab.classes.clear();
+    clickedTab.classes.add('dt-tab-selected');
   }
   
   void _showTestControls() {
-    HTMLDivElement testBody = _appElements.testBody;
+    DivElement testBody = _appElements.testBody;
     if(testBody == null) {
-      testBody = _runnerWindow.document.createElement('div');
+      testBody = new Element.tag('div');
       _appElements.testBody = testBody;
     
       // Create a toolbar to hold action buttons
-      HTMLDivElement toolDiv = _runnerWindow.document.createElement('div');
-      toolDiv.className = 'dt-toolbar';
-      HTMLButtonElement runBtn = _runnerWindow.document.createElement('button');
+      DivElement toolDiv = new Element.tag('div');
+      toolDiv.classes.add( 'dt-toolbar');
+      ButtonElement runBtn = new Element.tag('button');
       runBtn.innerHTML = '&#9658;';
       runBtn.title = 'Run Tests';
-      runBtn.className = 'dt-button dt-run';
-      runBtn.addEventListener('click', (event) {
+      runBtn.classes.add('dt-button dt-run');
+      runBtn.on.click.add((event) {
         _log('Running tests');
         updateUI = _updateDARTestUI;
         runDartests();
-      }, true);
-      toolDiv.appendChild(runBtn);
-      HTMLButtonElement exportBtn = 
-        _runnerWindow.document.createElement('button');
+      });
+      toolDiv.elements.add(runBtn);
+      ButtonElement exportBtn = new Element.tag('button');
       exportBtn.innerHTML = '&#8631;';
       exportBtn.title = 'Export Results';
-      exportBtn.className = 'dt-button dt-run';
-      exportBtn.addEventListener('click', (Event e) {
+      exportBtn.classes.add('dt-button dt-run');
+      exportBtn.on.click.add((event) {
         _log('Exporting results');
         _exportTestResults();
-      }, true);
-      toolDiv.appendChild(exportBtn);
-      testBody.appendChild(toolDiv);
+      });
       
+      toolDiv.elements.add(exportBtn);
+      testBody.elements.add(toolDiv);
+      
       // Create a datalist element for showing test status
-      HTMLDListElement statList = _runnerWindow.document.createElement('dl');
-      statList.className = 'dt-status';
-      HTMLElement runsDt = _runnerWindow.document.createElement('dt');
-      runsDt.textContent = 'Runs:';
-      statList.appendChild(runsDt);
-      HTMLElement testsRunElem = _runnerWindow.document.createElement('dd');
+      DListElement statList = new Element.tag('dl');
+      statList.classes.add('dt-status');
+      Element runsDt = new Element.tag('dt');
+      runsDt.text = 'Runs:';
+      statList.elements.add(runsDt);
+      Element testsRunElem = new Element.tag('dd');
       _appElements.testsRunElem = testsRunElem;
-      testsRunElem.textContent = testsRun.toString();
-      statList.appendChild(testsRunElem);
+      testsRunElem.text = testsRun.toString();
+      statList.elements.add(testsRunElem);
   
-      HTMLElement failDt = _runnerWindow.document.createElement('dt');
-      failDt.textContent = 'Failed:';
-      statList.appendChild(failDt);
-      HTMLElement testsFailedElem = _runnerWindow.document.createElement('dd');
+      Element failDt = new Element.tag('dt');
+      failDt.text = 'Failed:';
+      statList.elements.add(failDt);
+      Element testsFailedElem = new Element.tag('dd');
       _appElements.testsFailedElem = testsFailedElem;
-      testsFailedElem.textContent = testsFailed.toString();
-      statList.appendChild(testsFailedElem);
+      testsFailedElem.text = testsFailed.toString();
+      statList.elements.add(testsFailedElem);
   
-      HTMLElement errDt = _runnerWindow.document.createElement('dt');
-      errDt.textContent = 'Errors:';
-      statList.appendChild(errDt);
-      HTMLElement testsErrorsElem = _runnerWindow.document.createElement('dd');
+      Element errDt = new Element.tag('dt');
+      errDt.text = 'Errors:';
+      statList.elements.add(errDt);
+      Element testsErrorsElem = new Element.tag('dd');
       _appElements.testsErrorsElem = testsErrorsElem;
-      testsErrorsElem.textContent = testsErrors.toString();
-      statList.appendChild(testsErrorsElem);  
-      testBody.appendChild(statList);
+      testsErrorsElem.text = testsErrors.toString();
+      statList.elements.add(testsErrorsElem);  
+      testBody.elements.add(statList);
       
       // Create progressbar and add red, green, orange bars
-      HTMLDivElement progressDiv = _runnerWindow.document.createElement('div');
-      progressDiv.className = 'dt-progressbar';
+      DivElement progressDiv = new Element.tag('div');
+      progressDiv.classes.add('dt-progressbar');
       progressDiv.innerHTML = "<span style='width:100%'></span>";
       
-      HTMLSpanElement orange = _runnerWindow.document.createElement('span');
+      SpanElement orange = new Element.tag('span');
       _appElements.orange = orange;
-      orange.className = 'orange';
-      progressDiv.appendChild(orange);
+      orange.classes.add('orange');
+      progressDiv.elements.add(orange);
   
-      HTMLSpanElement red = _runnerWindow.document.createElement('span');
+      SpanElement red = new Element.tag('span');
       _appElements.red = red;
-      red.className = 'red';
-      progressDiv.appendChild(red);
+      red.classes.add('red');
+      progressDiv.elements.add(red);
       
-      HTMLSpanElement green = _runnerWindow.document.createElement('span');
+      SpanElement green = new Element.tag('span');
       _appElements.green = green;
-      green.className = 'green';
+      green.classes.add('green');
   
-      progressDiv.appendChild(green);
-      testBody.appendChild(progressDiv);
+      progressDiv.elements.add(green);
+      testBody.elements.add(progressDiv);
       
-      HTMLDivElement hiddenElem = _runnerWindow.document.createElement('div');
-      hiddenElem.className = 'dt-hide';
+      DivElement hiddenElem = new Element.tag('div');
+      hiddenElem.classes.add('dt-hide');
       hiddenElem.innerHTML = 
         "<a id='dt-export' download='test_results.csv' href='#' />";
-      testBody.appendChild(hiddenElem);
+      testBody.elements.add(hiddenElem);
       
       if(_appElements.mainElem != null) {
-        _appElements.mainElem.appendChild(testBody);
+        _appElements.mainElem.elements.add(testBody);
       }
     }
     
@@ -404,56 +408,54 @@
   } 
   
   void _showCoverageControls() {
-    HTMLDivElement coverageBody = _appElements.coverageBody;
+    DivElement coverageBody = _appElements.coverageBody;
     if(coverageBody == null) {
-      coverageBody = _runnerWindow.document.createElement('div');
+      coverageBody = new Element.tag('div');
       _appElements.coverageBody = coverageBody;
       
-      HTMLPreElement covPreElem = _runnerWindow.document.createElement('pre');
+      PreElement covPreElem = new Element.tag('pre');
       _appElements.covPreElem = covPreElem;
-      coverageBody.appendChild(covPreElem);
+      coverageBody.elements.tag(covPreElem);
       
-      HTMLTableElement covTable = _runnerWindow.document.createElement('table');
-      covTable.className = 'dt-results';
-      HTMLTableSectionElement head = 
-        _runnerWindow.document.createElement('thead');
+      TableElement covTable = new Element.tag('table');
+      covTable.classes.add('dt-results');
+      TableSectionElement head = new Element.tag('thead');
       head.innerHTML = '<tr><th>Unit <th>Function <th>Statement <th>Branch';
-      covTable.appendChild(head);
-      HTMLTableSectionElement covTableBody = 
-        _runnerWindow.document.createElement('tbody');
+      covTable.elements.add(head);
+      TableSectionElement covTableBody = new Element.tag('tbody');
       _appElements.covTableBody = covTableBody;
       covTableBody.id = 'dt-results-body';
-      covTable.appendChild(covTableBody);
-      coverageBody.appendChild(covTable);
+      covTable.elements.add(covTableBody);
+      coverageBody.elements.add(covTable);
       
       if(_appElements.mainElem != null) {
-        _appElements.mainElem.appendChild(coverageBody);
+        _appElements.mainElem.elements.add(coverageBody);
       }
     }
     _show(_appElements.coverageBody);
     _hide(_appElements.testBody);
 
-    _appElements.covPreElem.textContent = getCoverageSummary();
+    _appElements.covPreElem.text = getCoverageSummary();
     
     // Coverage table has unit names and integers and won't have special chars
     _appElements.covTableBody.innerHTML = getCoverageDetails();
   }
   
-  void _show(HTMLElement show) {
+  void _show(Element show) {
     if(show != null) {
-      if(show.classList.contains('dt-hide')) {
-        show.classList.remove('dt-hide');
+      if(show.classes.contains('dt-hide')) {
+        show.classes.remove('dt-hide');
       }
-      show.classList.add('dt-show');
+      show.classes.add('dt-show');
     }
   }
   
-  void _hide(HTMLElement hide) {
+  void _hide(Element hide) {
     if(hide != null) {
-      if(hide.classList.contains('dt-show')) {
-        hide.classList.remove('dt-show');
+      if(hide.classes.contains('dt-show')) {
+        hide.classes.remove('dt-show');
       }
-      hide.classList.add('dt-hide');
+      hide.classes.add('dt-hide');
     }
   }
 
@@ -481,8 +483,7 @@
   void _exportTestResults() {
     String csvData = getTestResultsCsv();
     _log(csvData);
-    HTMLAnchorElement exportLink = 
-      _runnerWindow.document.getElementById('dt-export');
+    AnchorElement exportLink = _runnerWindow.document.query('#dt-export');
     
     /** Bug: Can't instantiate WebKitBlobBuilder
      *  If this bug is fixed, we can remove the urlencode and lpad function.
@@ -495,10 +496,10 @@
     
     exportLink.href = 'data:text/csv,' + _urlencode(csvData);
     
-    MouseEvent ev = document.createEvent("MouseEvents");
-    ev.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0
-        , false, false, false, false, 0, null);
-    exportLink.dispatchEvent(ev);
+    //MouseEvent ev = document.createEvent("MouseEvents");
+    //ev.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0
+     //   , false, false, false, false, 0, null);
+    //exportLink.dispatchEvent(ev);
     
   }
 
Index: dartest/css.dart
===================================================================
--- dartest/css.dart	(revision 4589)
+++ dartest/css.dart	(working copy)
@@ -7,14 +7,14 @@
 
   /** This fuction injects the stylesheet text in the document */
   static void inject(Document doc, bool inAppMode){
-    HTMLStyleElement style = doc.createElement('style');
+    StyleElement style = new Element.tag('style');
     style.type = 'text/css';
     if(inAppMode) {
-      style.textContent = _commonStyles + _inAppStyles;
+      style.text = _commonStyles + _inAppStyles;
     } else {
-      style.textContent = _commonStyles + _fullAppStyles;
+      style.text = _commonStyles + _fullAppStyles;
     }
-    doc.head.appendChild(style);
+    doc.head.elements.add(style);
   }
   
   static String _commonStyles = '''
